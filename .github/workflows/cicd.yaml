name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: unicorncr.azurecr.io
  IMAGE_ORG: telecom
  RESOURCE_GROUP: tiu-dgga-rg
  NAMESPACE: unicorn-usageq-ns
  CLUSTER_NAME: unicorn-aks

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew usage-management-service:clean usage-management-service:build -x test
          ./gradlew usage-query-service:clean usage-query-service:build -x test
          ./gradlew usage-update-service:clean usage-update-service:build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            usage-management-service/build/libs/*.jar
            usage-query-service/build/libs/*.jar
            usage-update-service/build/libs/*.jar

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.timestamp.outputs.value }}
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Generate timestamp for image tag
        id: timestamp
        run: echo "value=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          az acr login --name unicorncr

      - name: Build and push Docker images
        run: |
          IMAGE_TAG=${{ steps.timestamp.outputs.value }}
          
          # Build and push management service
          docker build -f deployment/Dockerfile-usage-management-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${IMAGE_TAG} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${IMAGE_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:latest
          
          # Build and push query service
          docker build -f deployment/Dockerfile-usage-query-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${IMAGE_TAG} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${IMAGE_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:latest
          
          # Build and push update service
          docker build -f deployment/Dockerfile-usage-update-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${IMAGE_TAG} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${IMAGE_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:latest

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate manifest
        env:
          IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
          MANAGEMENT_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${{ needs.release.outputs.image_tag }}
          QUERY_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${{ needs.release.outputs.image_tag }}
          UPDATE_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${{ needs.release.outputs.image_tag }}
        run: |
          # Export variables for envsubst
          export namespace=${{ env.NAMESPACE }}
          export management_image_path=${MANAGEMENT_IMAGE}
          export query_image_path=${QUERY_IMAGE}
          export update_image_path=${UPDATE_IMAGE}
          
          # Generate deployment file
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Print generated manifest for debugging
          echo "Generated manifest:"
          cat deployment/deploy.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l "app=usage-management-service" -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l "app=usage-query-service" -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l "app=usage-update-service" -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify deployment
        run: |
          echo "Verifying service endpoints..."
          
          # Get service IPs
          MANAGEMENT_IP=$(kubectl get svc usage-management-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          QUERY_IP=$(kubectl get svc usage-query-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          UPDATE_IP=$(kubectl get svc usage-update-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Management Service IP: $MANAGEMENT_IP"
          echo "Query Service IP: $QUERY_IP"
          echo "Update Service IP: $UPDATE_IP"
          
          if [ -z "$MANAGEMENT_IP" ] || [ -z "$QUERY_IP" ] || [ -z "$UPDATE_IP" ]; then
            echo "Error: Service IPs not available"
            exit 1
          fi