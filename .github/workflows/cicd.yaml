name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Azure 설정
  RESOURCE_GROUP: tiu-dgga-rg
  CLUSTER_NAME: unicorn-aks
  REGISTRY: unicorncr.azurecr.io
  IMAGE_ORG: telecom

  # 앱 설정
  NAMESPACE: unicorn-usageq-ns

  # 리소스 설정
  RESOURCES_REQUESTS_CPU: 250m
  RESOURCES_REQUESTS_MEMORY: 512Mi
  RESOURCES_LIMITS_CPU: 500m
  RESOURCES_LIMITS_MEMORY: 1024Mi

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew usage-management-service:clean usage-management-service:build -x test
          ./gradlew usage-query-service:clean usage-query-service:build -x test
          ./gradlew usage-update-service:clean usage-update-service:build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            usage-management-service/build/libs/*.jar
            usage-query-service/build/libs/*.jar
            usage-update-service/build/libs/*.jar

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Generate image tag
        id: set_tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: |
          az acr login --name ${{ env.REGISTRY }}

      - name: Build and push management service image
        run: |
          docker build -f deployment/Dockerfile-usage-management-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${{ steps.set_tag.outputs.tag }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${{ steps.set_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:latest

      - name: Build and push query service image
        run: |
          docker build -f deployment/Dockerfile-usage-query-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${{ steps.set_tag.outputs.tag }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${{ steps.set_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:latest

      - name: Build and push update service image
        run: |
          docker build -f deployment/Dockerfile-usage-update-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${{ steps.set_tag.outputs.tag }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${{ steps.set_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:latest

  deploy:
    needs: release
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }}

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate manifest
        run: |
          # Export variables for envsubst
          export namespace=${{ env.NAMESPACE }}
          export management_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-management-service:${IMAGE_TAG}
          export query_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-query-service:${IMAGE_TAG}
          export update_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage-update-service:${IMAGE_TAG}
          export resources_requests_cpu=${{ env.RESOURCES_REQUESTS_CPU }}
          export resources_requests_memory=${{ env.RESOURCES_REQUESTS_MEMORY }}
          export resources_limits_cpu=${{ env.RESOURCES_LIMITS_CPU }}
          export resources_limits_memory=${{ env.RESOURCES_LIMITS_MEMORY }}
          
          # Generate deployment file
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Print generated manifest for debugging
          echo "Generated manifest:"
          cat deployment/deploy.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml

      - name: Verify deployment
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=ready pod -l "app=usage-management-service" -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l "app=usage-query-service" -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l "app=usage-update-service" -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Getting service endpoints..."
          MANAGEMENT_IP=$(kubectl get svc usage-management-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          QUERY_IP=$(kubectl get svc usage-query-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          UPDATE_IP=$(kubectl get svc usage-update-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Management Service IP: $MANAGEMENT_IP"
          echo "Query Service IP: $QUERY_IP"
          echo "Update Service IP: $UPDATE_IP"
          
          if [ -z "$MANAGEMENT_IP" ] || [ -z "$QUERY_IP" ] || [ -z "$UPDATE_IP" ]; then
            echo "Error: Service IPs not available"
            exit 1
          fi
