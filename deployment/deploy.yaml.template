# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: usage-config
  namespace: ${namespace}
data:
  SERVER_PORT: "8080"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "telecomdb"
  REDIS_PORT: "6379"
  REDIS_USERNAME: "default"
  BLOB_CONTAINER: "unicorn-checkpoints-usageq"

---
# Secret
apiVersion: v1
kind: Secret
metadata:
  name: usage-secret
  namespace: ${namespace}
stringData:
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "Passw0rd"
  REDIS_PASSWORD: "Passw0rd"
  EVENT_HUB_NAME: "unicorn-name-usageq"
  EVENT_HUB_CONNECTION_STRING: "Endpoint=sb://unicorn-ns-usageq.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=63BvPqjleXqqWS30g3Tk4To6pLZ5Jp+It+AEhIBkcjM="
  STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=unicornstorageusageq;AccountKey=374LvAxq4frBGT/Xg0Eq802vjiJRTm2ZbhU8Rlj+7SQXcAz4M0B0p6d5Ah7bzXSRrLQBY6mqozop+AStHd35MA==;BlobEndpoint=https://unicornstorageusageq.blob.core.windows.net/;FileEndpoint=https://unicornstorageusageq.file.core.windows.net/;QueueEndpoint=https://unicornstorageusageq.queue.core.windows.net/;TableEndpoint=https://unicornstorageusageq.table.core.windows.net/"

---
# Management Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-management-service
  namespace: ${namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usage-management-service
  template:
    metadata:
      labels:
        app: usage-management-service
    spec:
      containers:
      - name: usage-management-service
        image: ${management_image_path}
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: usage-config
        - secretRef:
            name: usage-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}

---
apiVersion: v1
kind: Service
metadata:
  name: usage-management-service
  namespace: ${namespace}
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: usage-management-service

---
# Query Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-query-service
  namespace: ${namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usage-query-service
  template:
    metadata:
      labels:
        app: usage-query-service
    spec:
      containers:
      - name: usage-query-service
        image: ${query_image_path}
        imagePullPolicy: Always
        env:
        - name: POSTGRES_HOST
          value: postgres-usageq-postgresql-read-hl
        - name: REDIS_HOST
          value: redis-usageq-master
        envFrom:
        - configMapRef:
            name: usage-config
        - secretRef:
            name: usage-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}

---
apiVersion: v1
kind: Service
metadata:
  name: usage-query-service
  namespace: ${namespace}
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: usage-query-service

---
# Update Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-update-service
  namespace: ${namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usage-update-service
  template:
    metadata:
      labels:
        app: usage-update-service
    spec:
      containers:
      - name: usage-update-service
        image: ${update_image_path}
        imagePullPolicy: Always
        env:
        - name: POSTGRES_HOST
          value: postgres-usageq-postgresql-primary-hl
        - name: REDIS_HOST
          value: redis-usageq-master
        envFrom:
        - configMapRef:
            name: usage-config
        - secretRef:
            name: usage-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}

---
apiVersion: v1
kind: Service
metadata:
  name: usage-update-service
  namespace: ${namespace}
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: usage-update-service
